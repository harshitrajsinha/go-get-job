package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"strconv"

	"github.com/harshitrajsinha/go-get-job/graph/model"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Jobs is the resolver for the jobs field.
func (r *queryResolver) Jobs(ctx context.Context, limit int32, offset int32) (*model.JobData, error) {
	data, err := r.res.GetJobs(ctx, limit, offset)
	if err != nil {
		return nil, gqlerror.Errorf("%s", err)
	}
	return data, nil
}

// JobByTitle is the resolver for the jobByTitle field.
func (r *queryResolver) JobByTitle(ctx context.Context, title string, limit int32, offset int32) (*model.JobData, error) {
	data, err := r.res.GetJobByTitle(ctx, title, limit, offset)
	if err != nil {
		return nil, gqlerror.Errorf("%s", err)
	}
	return data, nil
}

// JobByID is the resolver for the jobByID field.
func (r *queryResolver) JobByID(ctx context.Context, jobID int32) (*model.JobListing, error) {
	if len(strconv.Itoa(int(jobID))) != 6 {
		return nil, gqlerror.Errorf("job id must be exactly 6 digits")
	}

	data, err := r.res.GetJobByID(ctx, jobID)
	if err != nil {
		return nil, gqlerror.Errorf("%s", err)
	}
	return data, nil
}

// JobByCompany is the resolver for the jobByCompany field.
func (r *queryResolver) JobByCompany(ctx context.Context, company string, limit int32, offset int32) (*model.JobData, error) {
	data, err := r.res.GetJobByCompany(ctx, company, limit, offset)
	if err != nil {
		return nil, gqlerror.Errorf("%s", err)
	}
	return data, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
