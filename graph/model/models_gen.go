// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type JobData struct {
	Rows         []*JobListing `json:"rows"`
	TotalRecords *TotalRecords `json:"total_records"`
}

type JobListing struct {
	ID          string    `json:"id"`
	JobID       int32     `json:"job_id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	Company     string    `json:"company"`
	URL         string    `json:"url"`
	Experience  string    `json:"experience"`
	JobType     JobType   `json:"job_type"`
	Location    *Location `json:"location"`
}

type Location struct {
	City    string `json:"city"`
	Country string `json:"country"`
}

type Query struct {
}

type TotalRecords struct {
	TRec int32 `json:"t_rec"`
}

type JobType string

const (
	JobTypeFullTime JobType = "full_time"
	JobTypeContract JobType = "contract"
	JobTypeRemote   JobType = "remote"
)

var AllJobType = []JobType{
	JobTypeFullTime,
	JobTypeContract,
	JobTypeRemote,
}

func (e JobType) IsValid() bool {
	switch e {
	case JobTypeFullTime, JobTypeContract, JobTypeRemote:
		return true
	}
	return false
}

func (e JobType) String() string {
	return string(e)
}

func (e *JobType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JobType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JobType", str)
	}
	return nil
}

func (e JobType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *JobType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e JobType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
